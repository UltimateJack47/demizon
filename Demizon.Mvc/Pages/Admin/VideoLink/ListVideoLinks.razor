@page "/Admin/Videos"
@using Microsoft.EntityFrameworkCore
@using Demizon.Mvc.ViewModels
@using Demizon.Core.Services.VideoLink
@using Demizon.Dal.Entities
@using Demizon.Mvc.Pages.Admin.VideoLink.Components

<PageTitle>Video Links</PageTitle>
@inject IVideoLinkService VideoLinkService
@inject IMapper Mapper
@inject IDialogService DialogService
@layout AdminMainLayout

<MudTable @ref="VideoLinksGrid" T="VideoLinkViewModel.Read" Items="VideoLinks">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Video Link page</MudText>
        <MudSpacer />
        <MudIconButton Class="mt-0" Size="Size.Medium" aria-label="refresh" OnClick="RefreshTable" Icon="@Icons.Material.Filled.Refresh" ></MudIconButton>
        <MudButton Size="Size.Medium" Variant="Variant.Filled" Class="@GetCreateButtonClass()" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="() => ShowCreateVideoLink = !ShowCreateVideoLink">Create new</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Year</MudTh>
        <MudTh>URL</MudTh>
        <MudTh>Is Visible</MudTh>
        <MudTh Style="width: 40px"></MudTh>
    </HeaderContent>
    <RowTemplate Context="videoLink">
        <MudTd>@videoLink.Name</MudTd>
        <MudTd>@videoLink.Year</MudTd>
        <MudTd>@videoLink.Url</MudTd>
        <MudTd>
            @if (videoLink.IsVisible)
            {
                <MudIcon Icon="@Icons.Material.Filled.Visibility"></MudIcon>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.VisibilityOff"></MudIcon>
            }
        </MudTd>
        <MudTd>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.List" OnClick="() => NavigateToDetail(videoLink.Id)"></MudIconButton>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveVideoLink(videoLink.Id)"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@if (ShowCreateVideoLink)
{
    <VideoLinkForm PassVideoLink="NewVideoLink" Class="mt-2"></VideoLinkForm>
}


@code {
    private List<VideoLinkViewModel.Read> VideoLinks { get; set; } = new ();

    private bool ShowCreateVideoLink = false;
    
    private MudTable<VideoLinkViewModel.Read> VideoLinksGrid { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        VideoLinks = Mapper.Map<List<VideoLinkViewModel.Read>>(await VideoLinkService.GetAll().OrderByDescending(x=>x.Year).ToListAsync());
    }

    private async Task NewVideoLink(VideoLinkViewModel.Create videoLinkViewModel)
    {
        var videoLink = Mapper.Map<VideoLink>(videoLinkViewModel);
        await VideoLinkService.CreateAsync(videoLink);
        ShowCreateVideoLink = !ShowCreateVideoLink;
        await RefreshTable();
    }

    private string GetCreateButtonClass()
    {
        return ShowCreateVideoLink ? "active mt-0" : "mt-0";
    }

    private async Task RemoveVideoLink(int id)
    {
        var resultMessage = await DialogService.ShowMessageBox("Delete item?", null, "Yes", "Storno", null, new DialogOptions() {Position = DialogPosition.Center, CloseButton = false});
        if (resultMessage.HasValue && resultMessage.Value)
        {
            await VideoLinkService.DeleteAsync(id);
            await RefreshTable();
        }
    }

    private async Task RefreshTable()
    {
        VideoLinks = Mapper.Map<List<VideoLinkViewModel.Read>>(await VideoLinkService.GetAll().ToListAsync());
        StateHasChanged();
    }
    
    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<VideoLinkForm>("Create new Video Link");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProduct = result.Data as VideoLinkViewModel.Create;
            await VideoLinkService.CreateAsync(Mapper.Map<VideoLink>(newProduct));    
        }
    }

    private void NavigateToDetail(int id)
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Videos/Detail/{id}");
    }

}
