@page "/Admin/Videos"
@using Demizon.Core.Services.VideoLink
@using Demizon.Dal.Entities
@using Demizon.Mvc.Pages.Admin.VideoLink.Components
@using Demizon.Mvc.ViewModels
@using Microsoft.EntityFrameworkCore

<PageTitle>Video Links</PageTitle>

@inject IVideoLinkService VideoLinkService
@inject IMapper Mapper
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin")]
@layout AdminMainLayout

<MudTable @ref="VideoLinksGrid" T="VideoLinkViewModel" Items="VideoLinks" Hover="true" Striped="true" FixedHeader="true" Height="900px">
    <ToolBarContent>
        <MudText Typo="Typo.h3">@Localizer[nameof(DemizonLocales.VideoLinks)]</MudText>
        <MudSpacer/>
        <MudIconButton Class="mt-0" Size="Size.Medium" aria-label="refresh" OnClick="RefreshTable" Icon="@Icons.Material.Filled.Refresh"></MudIconButton>
        <MudButton Size="Size.Medium" Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" @onclick="() => OpenFormDialog()">@Localizer[nameof(DemizonLocales.Create)]</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.Name)]</b>
        </MudTh>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.Year)]</b>
        </MudTh>
        <MudTh>
            <b>URL</b>
        </MudTh>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.IsVisible)]</b>
        </MudTh>
        <MudTh Style="width: 40px"></MudTh>
    </HeaderContent>
    <RowTemplate Context="videoLink">
        <MudTd>@videoLink.Name</MudTd>
        <MudTd>@videoLink.Year</MudTd>
        <MudTd>@videoLink.Url</MudTd>
        <MudTd>
            @if (videoLink.IsVisible)
            {
                <MudIcon Icon="@Icons.Material.Filled.Visibility" Color="Color.Success"></MudIcon>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.VisibilityOff" Color="Color.Error"></MudIcon>
            }
        </MudTd>
        <MudTd Class="d-flex d-sm-inline-flex">
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenFormDialog(videoLink)"/>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.List" OnClick="() => NavigateToDetail(videoLink.Id)"/>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveVideoLink(videoLink.Id)"/>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private List<VideoLinkViewModel> VideoLinks { get; set; } = new();

    private MudTable<VideoLinkViewModel> VideoLinksGrid { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        VideoLinks = Mapper.Map<List<VideoLinkViewModel>>(await VideoLinkService.GetAll().OrderByDescending(x => x.Year).ToListAsync());
    }

    private async Task RemoveVideoLink(int id)
    {
        var resultMessage = await DialogService.ShowMessageBox(@Localizer[nameof(DemizonLocales.DeleteItem)], null, @Localizer[nameof(DemizonLocales.Yes)], @Localizer[nameof(DemizonLocales.Cancel)], null, new DialogOptions() {Position = DialogPosition.Center, CloseButton = false});
        if (resultMessage.HasValue && resultMessage.Value)
        {
            await VideoLinkService.DeleteAsync(id);
            await RefreshTable();
        }
    }

    private async Task RefreshTable()
    {
        VideoLinks = Mapper.Map<List<VideoLinkViewModel>>(await VideoLinkService.GetAll().ToListAsync());
        StateHasChanged();
    }

    private async Task OpenFormDialog(VideoLinkViewModel? viewModel = null)
    {
        var isUpdate = viewModel is not null;
        var options = new DialogOptions {CloseOnEscapeKey = true};
        var parameters = new DialogParameters
        {
            {"IsUpdate", isUpdate},
            {"Model", viewModel ?? new VideoLinkViewModel()}
        };
        var dialog = await DialogService.ShowAsync<VideoLinkForm>("Video Link form", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var linkResult = result.Data as VideoLinkViewModel;
            try
            {
                if (isUpdate)
                {
                    await VideoLinkService.UpdateAsync(viewModel!.Id, Mapper.Map<VideoLink>(linkResult));
                    Snackbar.Add("The video link has been updated.", Severity.Success);
                }
                else
                {
                    await VideoLinkService.CreateAsync(Mapper.Map<VideoLink>(linkResult));
                    Snackbar.Add("The video link has been created.", Severity.Success);
                }

                await RefreshTable();
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong.", Severity.Error);
            }
        }
    }

    private void NavigateToDetail(int id)
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Videos/Detail/{id}");
    }

}
