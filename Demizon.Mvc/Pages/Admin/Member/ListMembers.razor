@page "/Admin/Members"
@using Demizon.Core.Services.Member
@using Demizon.Dal.Entities
@using Demizon.Mvc.Pages.Admin.Member.Components
@using Demizon.Mvc.ViewModels
@using Microsoft.EntityFrameworkCore

<PageTitle>Members</PageTitle>
@inject IMemberService MemberService
@inject IMapper Mapper
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@layout AdminMainLayout

<MudTable @ref="MembersGrid" T="MemberViewModel" Items="Members" Hover="true" Striped="true" FixedHeader="true" Height="900px">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Members</MudText>
        <MudSpacer/>
        <MudIconButton Class="mt-0" Size="Size.Medium" aria-label="refresh" OnClick="RefreshTable" Icon="@Icons.Material.Filled.Refresh"></MudIconButton>
        <MudButton Size="Size.Medium" Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" @onclick="() => OpenFormDialog()">Create one</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <b>First Name</b>
        </MudTh>
        <MudTh>
            <b>Last Name</b>
        </MudTh>
        <MudTh>
            <b>Member since</b>
        </MudTh>
        <MudTh>
            <b>Birthdate</b>
        </MudTh>
        <MudTh>
            <b>Is Visible</b>
        </MudTh>
        <MudTh Style="width: 40px"></MudTh>
    </HeaderContent>
    <RowTemplate Context="member">
        <MudTd>@member.FirstName</MudTd>
        <MudTd>@member.LastName</MudTd>
        <MudTd>@member.MemberSince?.ToShortDateString()</MudTd>
        <MudTd>@member.BirthDate?.ToShortDateString()</MudTd>
        <MudTd>
            @if (member.IsVisible)
            {
                <MudIcon Icon="@Icons.Material.Filled.Visibility" Color="Color.Success"></MudIcon>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.VisibilityOff" Color="Color.Error"></MudIcon>
            }
        </MudTd>
        <MudTd Class="d-flex d-sm-inline-flex">
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenFormDialog(member)"/>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.List" OnClick="() => NavigateToDetail(member.Id)"/>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveMember(member.Id)"/>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private List<MemberViewModel> Members { get; set; } = new();

    private MudTable<MemberViewModel> MembersGrid { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Members = Mapper.Map<List<MemberViewModel>>(await MemberService.GetAll().ToListAsync());
    }

    private async Task RemoveMember(int id)
    {
        var resultMessage = await DialogService.ShowMessageBox("Delete item?", null, "Yes", "Storno", null, new DialogOptions() { Position = DialogPosition.Center, CloseButton = false });
        if (resultMessage.HasValue && resultMessage.Value)
        {
            await MemberService.DeleteAsync(id);
            await RefreshTable();
        }
    }

    private async Task RefreshTable()
    {
        Members = Mapper.Map<List<MemberViewModel>>(await MemberService.GetAll().OrderBy(x => x.Id).ToListAsync());
        StateHasChanged();
    }

    private async Task OpenFormDialog(MemberViewModel? viewModel = null)
    {
        var isUpdate = viewModel is not null;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "IsUpdate", isUpdate },
            { "Model", viewModel ?? new MemberViewModel() }
        };
        var dialog = await DialogService.ShowAsync<MemberForm>("Member form", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var memberResult = result.Data as MemberViewModel;
            try
            {
                if (isUpdate)
                {
                    await MemberService.UpdateAsync(viewModel!.Id, Mapper.Map<Member>(memberResult));
                    Snackbar.Add("The member has been updated.", Severity.Success);
                }
                else
                {
                    await MemberService.CreateAsync(Mapper.Map<Member>(memberResult));
                    Snackbar.Add("The member has been created.", Severity.Success);
                }
                await RefreshTable();
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong.", Severity.Error);
            }
        }
    }

    private void NavigateToDetail(int id)
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Members/Detail/{id}");
    }

}
