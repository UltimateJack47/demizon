@page "/Admin/Members"
@using Microsoft.EntityFrameworkCore
@using AutoMapper
@using Demizon.Core.Services.Member
@using Demizon.Dal.Entities
@using Demizon.Mvc.ViewModels
@using Demizon.Mvc.Pages.Admin.Member.Components

<PageTitle>Members</PageTitle>
@inject IMemberService MemberService
@inject IMapper Mapper
@inject IDialogService DialogService

<MudTable @ref="MembersGrid" T="MemberViewModel.Read" Items="Members">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Member page</MudText>
        <MudSpacer />
        <MudIconButton Class="mt-0" Size="Size.Medium" aria-label="refresh" OnClick="RefreshTable" Icon="@Icons.Material.Filled.Refresh" ></MudIconButton>
        <MudButton Size="Size.Medium" Variant="Variant.Filled" Class="@GetCreateButtonClass()" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="() => ShowCreateMember = !ShowCreateMember">Create new</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Member since</MudTh>
        <MudTh>Birthdate</MudTh>
        <MudTh>Is Visible</MudTh>
        <MudTh Style="width: 40px"></MudTh>
    </HeaderContent>
    <RowTemplate Context="member">
        <MudTd>@member.FirstName</MudTd>
        <MudTd>@member.LastName</MudTd>
        <MudTd>@member.MemberSince?.ToLocalTime().ToShortDateString()</MudTd>
        <MudTd>@member.BirthDate?.ToLocalTime().ToShortDateString()</MudTd>
        <MudTd>
            @if (member.IsVisible)
            {
                <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
            }
        </MudTd>
        <MudTd>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.List" OnClick="() => NavigateToDetail(member.Id)"></MudIconButton>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveMember(member.Id)"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@if (ShowCreateMember)
{
    <MemberForm PassMember="NewMember" Class="mt-2"></MemberForm>
}


@code {
    private List<MemberViewModel.Read> Members { get; set; } = new ();

    private bool ShowCreateMember = false;
    
    private MudTable<MemberViewModel.Read> MembersGrid { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Members = Mapper.Map<List<MemberViewModel.Read>>(await MemberService.GetAll().ToListAsync());
    }

    private async Task NewMember(MemberViewModel.Create memberViewModel)
    {
        var member = Mapper.Map<Member>(memberViewModel);
        await MemberService.CreateAsync(member);
        ShowCreateMember = !ShowCreateMember;
        await RefreshTable();
    }

    private string GetCreateButtonClass()
    {
        return ShowCreateMember ? "active mt-0" : "mt-0";
    }

    private async Task RemoveMember(int id)
    {
        var resultMessage = await DialogService.ShowMessageBox("Delete item?", null, "Yes", "Storno", null, new DialogOptions() {Position = DialogPosition.Center, CloseButton = false});
        if (resultMessage.HasValue && resultMessage.Value)
        {
            await MemberService.DeleteAsync(id);
            await RefreshTable();
        }
    }

    private async Task RefreshTable()
    {
        Members = Mapper.Map<List<MemberViewModel.Read>>(await MemberService.GetAll().ToListAsync());
        StateHasChanged();
    }
    
    private async Task OpenCreateDialog()
    {
        var dialog = DialogService.Show<MemberForm>("Create new Member");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var newMember = result.Data as MemberViewModel.Create;
            await MemberService.CreateAsync(Mapper.Map<Member>(newMember));    
        }
    }

    private void NavigateToDetail(int id)
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Members/Detail/{id}");
    }

}
