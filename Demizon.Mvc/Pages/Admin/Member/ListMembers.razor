@page "/Admin/Members"
@using System.Security.Claims
@using Demizon.Core.Services.Member
@using Demizon.Dal.Entities
@using Demizon.Mvc.Pages.Admin.Member.Components
@using Demizon.Mvc.ViewModels
@using Microsoft.EntityFrameworkCore

@inject IMemberService MemberService
@inject IMapper Mapper
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@layout AdminMainLayout
<PageTitle>@Localizer[nameof(DemizonLocales.Members)]</PageTitle>

<MudTable @ref="MembersGrid" T="MemberViewModel" Items="Members" Hover="true" Striped="true" FixedHeader="true" Height="900px">
    <ToolBarContent>
        <MudText Typo="Typo.h3">@Localizer[nameof(DemizonLocales.Members)]</MudText>
        <MudSpacer/>
        <MudIconButton Class="mt-0" Size="Size.Medium" aria-label="refresh" OnClick="RefreshTable" Icon="@Icons.Material.Filled.Refresh"></MudIconButton>
        <MudButton Size="Size.Medium" Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary"
                   @onclick="() => OpenFormDialog()">
            @Localizer[nameof(DemizonLocales.Create)]
        </MudButton>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.FirstName)]</b>
        </MudTh>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.Surname)]</b>
        </MudTh>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.Login)]</b>
        </MudTh>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.Email)]</b>
        </MudTh>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.MemberSince)]</b>
        </MudTh>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.Birthdate)]</b>
        </MudTh>
        <MudTh>
            <b>@Localizer[nameof(DemizonLocales.IsVisible)]</b>
        </MudTh>
        <MudTh Style="width: 40px"></MudTh>
    </HeaderContent>

    <RowTemplate Context="member">
        <MudTd>@member.Name</MudTd>
        <MudTd>@member.Surname</MudTd>
        <MudTd>@member.Login</MudTd>
        <MudTd>@member.Email</MudTd>
        <MudTd>@member.MemberSince?.ToShortDateString()</MudTd>
        <MudTd>@member.Birthdate?.ToShortDateString()</MudTd>
        <MudTd>
            @if (member.IsVisible)
            {
                <MudIcon Icon="@Icons.Material.Filled.Visibility" Color="Color.Success"></MudIcon>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.VisibilityOff" Color="Color.Error"></MudIcon>
            }
        </MudTd>
        <MudTd>
            @if (member.Id == LoggedUser.Id || LoggedUser.Role == UserRole.Admin)
            {
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenFormDialog(member)"/>
            }
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.List" OnClick="() => NavigateToDetail(member.Id)"/>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveMember(member.Id)"/>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    private MemberViewModel LoggedUser { get; set; } = new();

    private List<MemberViewModel> Members { get; set; } = new();

    private MudTable<MemberViewModel> MembersGrid { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Members = Mapper.Map<List<MemberViewModel>>(await MemberService.GetAll().ToListAsync());
        var loggedUserLogin = AuthenticationState?.Result.User.Claims.First(x => x.Type == ClaimTypes.Name).Value;
        LoggedUser = Mapper.Map<MemberViewModel>(MemberService.GetOneByLogin(loggedUserLogin));
    }

    private async Task RemoveMember(int id)
    {
        var resultMessage = await DialogService.ShowMessageBox(Localizer[nameof(DemizonLocales.DeleteItem)], null, Localizer[nameof(DemizonLocales.Yes)], Localizer[nameof(DemizonLocales.Cancel)], null, new DialogOptions() {Position = DialogPosition.Center, CloseButton = false});
        if (resultMessage.HasValue && resultMessage.Value)
        {
            await MemberService.DeleteAsync(id);
            await RefreshTable();
        }
    }

    private async Task RefreshTable()
    {
        Members = Mapper.Map<List<MemberViewModel>>(await MemberService.GetAll().ToListAsync());
        StateHasChanged();
    }

    private async Task OpenFormDialog(MemberViewModel? viewModel = null)
    {
        var isUpdate = viewModel is not null;
        var options = new DialogOptions {CloseOnEscapeKey = true};
        var parameters = new DialogParameters
        {
            {"IsUpdate", isUpdate},
            {"Model", viewModel ?? new MemberViewModel()},
            {"AuthenticationState", AuthenticationState}
        };
        var dialog = await DialogService.ShowAsync<MemberForm>("Member form", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var memberResult = result.Data is true;
            if (memberResult)
            {
                Snackbar.Add(isUpdate ? "The member has been updated." : "The member has been created.", Severity.Success);
                await RefreshTable();
            }
            else
            {
                Snackbar.Add("Something went wrong.", Severity.Error);
            }
        }
    }

    private void NavigateToDetail(int id)
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Members/Detail/{id}");
    }

}
