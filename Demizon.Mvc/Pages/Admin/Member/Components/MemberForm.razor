@using System.Security.Claims
@using Demizon.Core.Services.FileUpload
@using Demizon.Core.Services.Member
@using Demizon.Dal.Entities
@using Demizon.Mvc.ViewModels
@using Color = MudBlazor.Color
<MudDialog>
    <TitleContent>
        <MudText
            Typo="Typo.h6">
            @if (IsUpdate)
            {
                @Localizer[nameof(DemizonLocales.Update)]
            }
            else
            {
                @Localizer[nameof(DemizonLocales.Create)]
            }
            - @Localizer[nameof(DemizonLocales.Member)]
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField @bind-Value="Model.Name" T="string" Label="@Localizer[nameof(DemizonLocales.FirstName)]" Required="true" RequiredError="Name is required!"/>
        <MudTextField @bind-Value="Model.Surname" T="string" Label="@Localizer[nameof(DemizonLocales.Surname)]"/>
        <MudTextField @bind-Value="Model.Login" T="string" Label="@Localizer[nameof(DemizonLocales.Login)]" Required="true" RequiredError="Login is required!"/>
        <MudTextField @bind-Value="Model.Email" T="string" Label="@Localizer[nameof(DemizonLocales.Email)]" Required="true" RequiredError="Email is required!"/>
        @if ((IsUpdate && (Model.Id == LoggedUser.Id)) || !IsUpdate)
        {
            <MudTextField @bind-Value="Model.Password" T="string" Label="@Localizer[nameof(DemizonLocales.Password)]"
                          Variant="Variant.Text" InputType="@_passwordInput" Adornment="Adornment.End"
                          AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="ChangeIsShow" Required="true"
                          RequiredError="Password is required!"/>
        }
        <MudDatePicker @bind-Date="Model.MemberSince" Label="@Localizer[nameof(DemizonLocales.MemberSince)]"
                       Clearable="true" Editable="true" MaxDate="DateTime.Today"/>
        <MudDatePicker @bind-Date="Model.Birthdate" Label="@Localizer[nameof(DemizonLocales.Birthdate)]"
                       Clearable="true" Editable="true" MaxDate="DateTime.Today"/>
        <MudSelect @bind-Value="Model.Gender" Label="@Localizer[nameof(DemizonLocales.Gender)]" T="Gender">
            @foreach (Gender item in Enum.GetValues(typeof(Gender)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile" Accept="image/*">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    @Localizer[nameof(DemizonLocales.UploadProfilePhoto)]
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        @if (File is not null)
        {
            <MudList>
                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@File">
                    @File.Name <code>@File.Size bytes</code>
                    <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" OnClick="RemoveFile"></MudIconButton>
                </MudListItem>
            </MudList>
        }
        @if (LoggedUser.Role == UserRole.Admin)
        {
            <MudCheckBox @bind-Value="Model.IsVisible" Label="@Localizer[nameof(DemizonLocales.IsVisible)]"></MudCheckBox>
        }

    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer[nameof(DemizonLocales.Cancel)]</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ClickedOk">
            @if (IsUpdate)
            {
                <span>@Localizer[nameof(DemizonLocales.Update)]</span>
            }
            else
            {
                <span>@Localizer[nameof(DemizonLocales.Create)]</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] IMemberService MemberService { get; set; } = null!;
    [Inject] private IFileUploadService FileUploadService { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter] public MemberViewModel Model { get; set; } = new();


    [Parameter] public bool IsUpdate { get; set; }

    private MemberViewModel LoggedUser { get; set; } = new();
    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private IBrowserFile? File { get; set; }

    protected override void OnInitialized()
    {
        var loggedUserLogin = AuthenticationState?.Result.User.Claims.First(x => x.Type == ClaimTypes.Name).Value;
        LoggedUser = Mapper.Map<MemberViewModel>(MemberService.GetOneByLogin(loggedUserLogin));
    }

    private async Task ClickedOk()
    {
        try
        {
            var dbModel = Mapper.Map<Member>(Model);
            if (File is not null)
            {
                //TODO upload the files to the server
                /*var stream = File.OpenReadStream(25 * 1024 * 1024);
                var array = new byte[stream.Length];
                await stream.ReadAsync(array, 0, (int)stream.Length);
                var photoString = "data:image/jpg;base64,"+Convert.ToBase64String(array);
                var file = new File
                {
                    MemberId = Model.Id,
                    Path = photoString,
                    ContentType = File.ContentType,
                    FileSize = File.Size,
                    FileExtension = File.Name
                };
                dbModel.Photos.Add(file);*/
                /*var result = await FileUploadService.UploadImageAsync(new FileUploadRequest
                {
                    Stream = stream,
                    FileExtension = Path.GetExtension(File.Name),
                    FileName = Path.GetFileNameWithoutExtension(File.Name),
                    FileSize = File.Size,
                    ContentType = File.ContentType
                } );*/
            }

            if (IsUpdate)
            {
                await MemberService.UpdateAsync(Model.Id, dbModel);
            }
            else
            {
                await MemberService.CreateAsync(dbModel);
            }

            Snackbar.Add(IsUpdate ? "The member has been updated." : "The member has been created.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong.", Severity.Error);
            MudDialog.Close(DialogResult.Ok(false));
        }
    }

    private void UploadFile(IBrowserFile file)
    {
        File = file;
    }

    private void RemoveFile()
    {
        File = null;
    }

    void ChangeIsShow()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}