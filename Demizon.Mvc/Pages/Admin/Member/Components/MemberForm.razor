@using Demizon.Core.Services
@using Demizon.Dal.Entities
@using Demizon.Mvc.ViewModels
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Localizer[nameof(DemizonLocales.Member)] - @Localizer[nameof(DemizonLocales.Form)]</MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField @bind-Value="Model.Name" T="string" Label="@Localizer[nameof(DemizonLocales.FirstName)]" Required="true" RequiredError="Name is required!"/>
        <MudTextField @bind-Value="Model.Surname" T="string" Label="@Localizer[nameof(DemizonLocales.Surname)]"/>
        <MudTextField @bind-Value="Model.Login" T="string" Label="@Localizer[nameof(DemizonLocales.Login)]" Required="true" RequiredError="Login is required!"/>
        <MudTextField @bind-Value="Model.Email" T="string" Label="@Localizer[nameof(DemizonLocales.Email)]" Required="true" RequiredError="Email is required!"/>
        <MudTextField @bind-Value="Model.Password" T="string" Label="@Localizer[nameof(DemizonLocales.Password)]" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ChangeIsShow" Required="true" RequiredError="Password is required!"/>
        <MudDatePicker @bind-Date="Model.MemberSince" Label="@Localizer[nameof(DemizonLocales.MemberSince)]" Clearable="true" Editable="true" Required="true" MaxDate="DateTime.Today"/>
        <MudDatePicker @bind-Date="Model.Birthdate" Label="@Localizer[nameof(DemizonLocales.Birthdate)]" Clearable="true" Editable="true" Required="true" MaxDate="DateTime.Today"/>
        <MudSelect @bind-Value="Model.Gender" Label="@Localizer[nameof(DemizonLocales.Gender)]" T="Gender">
            @foreach (Gender item in Enum.GetValues(typeof(Gender)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    @Localizer[nameof(DemizonLocales.UploadFile)]
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        @if (File is not null)
        {
            <MudList>
                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@File">
                    @File.Name <code>@File.Size bytes</code>
                    <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" OnClick="RemoveFile"></MudIconButton>
                </MudListItem>
            </MudList>
        }
        <MudCheckBox @bind-Value="Model.IsVisible" Label="@Localizer[nameof(DemizonLocales.IsVisible)]"></MudCheckBox>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer[nameof(DemizonLocales.Cancel)]</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ClickedOk">
            @if (IsUpdate)
            {
                <span>@Localizer[nameof(DemizonLocales.Update)]</span>
            }
            else
            {
                <span>@Localizer[nameof(DemizonLocales.Create)]</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter] public MemberViewModel Model { get; set; } = new();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public bool IsUpdate { get; set; }

    bool IsShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    [Inject] private IFileUploadService FileUploadService { get; set; } = null!;

    [Inject] private ISnackbar Snackbar { get; set; } = null!;

    private async Task ClickedOk()
    {
        if (File is not null)
        {
            //TODO upload the files to the server
            var stream = File.OpenReadStream(25 * 1024 * 1024);
            /*var result = await FileUploadService.UploadImageAsync(new FileUploadRequest
            {
                Stream = stream,
                FileExtension = Path.GetExtension(File.Name),
                FileName = Path.GetFileNameWithoutExtension(File.Name),
                FileSize = File.Size,
                ContentType = File.ContentType
            } );*/
        }

        MudDialog.Close(DialogResult.Ok(Model));
    }

    private IBrowserFile? File { get; set; }

    private void UploadFile(IBrowserFile file)
    {
        File = file;
    }

    private void RemoveFile()
    {
        File = null;
    }

    void ChangeIsShow()
    {
        @if (IsShow)
        {
            IsShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            IsShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}
