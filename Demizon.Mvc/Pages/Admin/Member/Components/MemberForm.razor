@using Demizon.Mvc.ViewModels
@using Demizon.Dal.Entities
@using Demizon.Core.Services

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Member form</MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField @bind-Value="Model.FirstName" Label="First Name" Required="true" RequiredError="First Name is required!"/>
        <MudTextField @bind-Value="Model.LastName" Label="Last Name" Required="true" RequiredError="Last Name is required!"/>
        <MudDatePicker @bind-Date="Model.MemberSince" Label="Member Since" Clearable="true" Editable="true" Required="true" MaxDate="DateTime.Today"/>
        <MudDatePicker @bind-Date="Model.BirthDate" Label="Birthdate" Clearable="true" Editable="true" Required="true" MaxDate="DateTime.Today"/>
        <MudSelect @bind-Value="Model.Gender" Label="Gender" T="Gender">
            @foreach (Gender item in Enum.GetValues(typeof(Gender)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    Upload Files
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        @if (Files.Any())
        {
            <MudText Typo="@Typo.h6">@Files.Count File@(Files.Count == 1 ? "" : "s"):</MudText>
            <MudList>
                @foreach (var file in Files)
                {
                    <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                        @file.Name <code>@file.Size bytes</code>
                        <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveFile(file)"></MudIconButton>
                    </MudListItem>
                }
            </MudList>
        }
        <MudCheckBox @bind-Checked="Model.IsVisible" Label="Is visible?"></MudCheckBox>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ClickedOk">
            @if (IsUpdate)
            {
                <span>Update</span>
            }
            else
            {
                <span>Create</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject]
    private IFileUploadService FileUploadService { get; set; } = null!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public MemberViewModel Model { get; set; } = new();

    [Parameter]
    public bool IsUpdate { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void ClickedOk()
    {
        MudDialog.Close(DialogResult.Ok(Model));
    }

    IList<IBrowserFile> Files = new List<IBrowserFile>();

    private async Task UploadFiles(IBrowserFile file)
    {
        Files.Add(file);
        var stream = file.OpenReadStream();
        //var result = await FileUploadService.UploadImageAsync(new FileUploadRequest() {Stream = stream} );

    //TODO upload the files to the server
    }

    private void RemoveFile(IBrowserFile file)
    {
        Files.Remove(file);
    }

}
