@page "/Admin/Dances"
@using Microsoft.EntityFrameworkCore
@using Demizon.Mvc.ViewModels
@using Demizon.Core.Services.Dance
@using Demizon.Dal.Entities
@using Demizon.Mvc.Pages.Admin.Dance.Components

<PageTitle>Dances</PageTitle>
@inject IDanceService DanceService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@layout AdminMainLayout

<MudTable @ref="DancesGrid" T="DanceViewModel" Items="Dances" Hover="true" Striped="true" FixedHeader="true" Height="900px">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Dances</MudText>
        <MudSpacer/>
        <MudIconButton Class="mt-0" Size="Size.Medium" aria-label="refresh" OnClick="RefreshTable" Icon="@Icons.Material.Filled.Refresh"></MudIconButton>
        <MudButton Size="Size.Medium" Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" @onclick="() => OpenFormDialog()">Create one</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <b>Name</b>
        </MudTh>
        <MudTh>
            <b>Is Visible</b>
        </MudTh>
        <MudTh Style="width: 40px"></MudTh>
    </HeaderContent>
    <RowTemplate Context="dance">
        <MudTd>@dance.Name</MudTd>
        <MudTd>
            @if (dance.IsVisible)
            {
                <MudIcon Icon="@Icons.Material.Filled.Visibility" Color="Color.Success"></MudIcon>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.VisibilityOff" Color="Color.Error"></MudIcon>
            }
        </MudTd>
        <MudTd Class="d-flex d-sm-inline-flex">
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenFormDialog(dance)"/>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.List" OnClick="() => NavigateToDetail(dance.Id)"/>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveDance(dance.Id)"/>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private List<DanceViewModel> Dances { get; set; } = new();

    private MudTable<DanceViewModel> DancesGrid { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Dances = Mapper.Map<List<DanceViewModel>>(await DanceService.GetAll().OrderBy(x => x.Id).ToListAsync());
    }

    private async Task RemoveDance(int id)
    {
        var resultMessage = await DialogService.ShowMessageBox("Delete item?", null, "Yes", "Storno", null, new DialogOptions() { Position = DialogPosition.Center, CloseButton = false });
        if (resultMessage.HasValue && resultMessage.Value)
        {
            await DanceService.DeleteAsync(id);
            await RefreshTable();
        }
    }

    private async Task RefreshTable()
    {
        Dances = Mapper.Map<List<DanceViewModel>>(await DanceService.GetAll().ToListAsync());
        StateHasChanged();
    }

    private async Task OpenFormDialog(DanceViewModel? viewModel = null)
    {
        var isUpdate = viewModel is not null;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "IsUpdate", isUpdate },
            { "Model", viewModel ?? new DanceViewModel() }
        };
        var dialog = await DialogService.ShowAsync<DanceForm>("Dance form", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var danceResult = result.Data as DanceViewModel;
            try
            {
                if (isUpdate)
                {
                    await DanceService.UpdateAsync(viewModel!.Id, Mapper.Map<Dance>(danceResult));
                    Snackbar.Add("The dance has been updated.", Severity.Success);
                }
                else
                {
                    await DanceService.CreateAsync(Mapper.Map<Dance>(danceResult));
                    Snackbar.Add("The dance has been created.", Severity.Success);
                }
                await RefreshTable();
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong.", Severity.Error);
            }
        }
    }

    private void NavigateToDetail(int id)
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Dances/Detail/{id}");
    }

}
