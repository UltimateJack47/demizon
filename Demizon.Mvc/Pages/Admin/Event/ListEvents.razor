@page "/Admin"
@page "/Admin/Events"
@using Demizon.Core.Services.Event
@using Demizon.Dal.Entities
@using Demizon.Mvc.Pages.Admin.Event.Components
@using Demizon.Mvc.ViewModels
@using Microsoft.EntityFrameworkCore

@layout AdminMainLayout

<PageTitle>Events</PageTitle>

@inject IEventService EventService
@inject IMapper Mapper
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudTable @ref="EventsGrid" T="EventViewModel" Items="Events" Hover="true" Striped="true" FixedHeader="true" Height="900px">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Events</MudText>
        <MudSpacer/>
        <MudIconButton Class="mt-0" Size="Size.Medium" aria-label="refresh" OnClick="RefreshTable" Icon="@Icons.Material.Filled.Refresh"></MudIconButton>
        <MudButton Size="Size.Medium" Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" @onclick="() => OpenFormDialog()">Create one</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <b>Name</b>
        </MudTh>
        <MudTh>
            <b>Date</b>
        </MudTh>
        <MudTh>
            <b>Place</b>
        </MudTh>
        <MudTh Style="width: 40px"></MudTh>
    </HeaderContent>
    <RowTemplate Context="upcomingEvent">
        <MudTd>@upcomingEvent.Name</MudTd>
        @if (upcomingEvent.DateFrom != upcomingEvent.DateTo)
        {
            <MudTd>@upcomingEvent.DateFrom.ToString("d. MMMM yyyy") - @upcomingEvent.DateTo.ToLocalTime().ToString("dd. MMMM yyyy")</MudTd>
        }
        else
        {
            <MudTd>@upcomingEvent.DateFrom.ToString("dd. MMMM yyyy")</MudTd>
        }


        @if (upcomingEvent.Place is not null)
        {
            <MudTd>@upcomingEvent.Place</MudTd>
        }
        else
        {
            <MudTd></MudTd>
        }
        <MudTd Class="d-flex d-sm-inline-flex">
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenFormDialog(upcomingEvent)"/>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.List" OnClick="() => NavigateToDetail(upcomingEvent.Id)"/>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveEvent(upcomingEvent.Id)"/>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<EventViewModel> Events { get; set; } = new();

    private MudTable<EventViewModel> EventsGrid { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Events = Mapper.Map<List<EventViewModel>>(await EventService.GetAll().ToListAsync());
    }

    private async Task RefreshTable()
    {
        Events = Mapper.Map<List<EventViewModel>>(await EventService.GetAll().OrderByDescending(x => x.DateFrom).ToListAsync());
        StateHasChanged();
    }

    private async Task OpenFormDialog(EventViewModel? viewModel = null)
    {
        var isUpdate = viewModel is not null;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "IsUpdate", isUpdate },
            { "EventModel", viewModel ?? new EventViewModel() }
        };
        var dialog = await DialogService.ShowAsync<EventForm>("Event form", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var memberResult = result.Data as EventViewModel;
            try
            {
                if (isUpdate)
                {
                    await EventService.UpdateAsync(viewModel!.Id, Mapper.Map<Event>(memberResult));
                    Snackbar.Add("The event has been updated.", Severity.Success);
                }
                else
                {
                    await EventService.CreateAsync(Mapper.Map<Event>(memberResult));
                    Snackbar.Add("The event has been created.", Severity.Success);
                }
                await RefreshTable();
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong.", Severity.Error);
            }
        }
    }

    private void NavigateToDetail(int id)
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Events/Detail/{id}");
    }

    private async Task RemoveEvent(int id)
    {
        var result = await DialogService.ShowMessageBox("Smazat?", "Opravdu si přejete smazat tuto položku?", "Ano", "Ne");
        if (result.HasValue && result.Value)
        {
            await EventService.DeleteAsync(id);
            Events.RemoveAll(x => x.Id == id);
        }
    }

}
