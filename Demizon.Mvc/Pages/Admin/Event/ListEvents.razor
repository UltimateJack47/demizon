@page "/Admin"
@page "/Admin/Events"
@using Microsoft.EntityFrameworkCore
@using Demizon.Mvc.ViewModels
@using Demizon.Core.Services.Event
@using Demizon.Dal.Entities
@using Demizon.Mvc.Pages.Admin.Event.Components

@layout AdminMainLayout

<PageTitle>Events</PageTitle>

@inject IEventService EventService
@inject IMapper Mapper
@inject IDialogService DialogService

<MudTable @ref="EventsGrid" T="EventViewModel" Items="Events">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Upcoming events page</MudText>
        <MudSpacer/>
        <MudIconButton Class="mt-0" Size="Size.Medium" aria-label="refresh" OnClick="RefreshTable" Icon="@Icons.Material.Filled.Refresh"></MudIconButton>
        <MudButton Size="Size.Medium" Variant="Variant.Filled" Class="@GetCreateButtonClass()" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="() => ShowCreateEvent = !ShowCreateEvent">Create new</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Place</MudTh>
        <MudTh Style="width: 40px"></MudTh>
    </HeaderContent>
    <RowTemplate Context="upcomingEvent">
        <MudTd>@upcomingEvent.Name</MudTd>
        @if (upcomingEvent.DateFrom != upcomingEvent.DateTo)
        {
            <MudTd>@upcomingEvent.DateFrom.ToLocalTime().ToString("d. MMMM yyyy") - @upcomingEvent.DateTo.ToLocalTime().ToString("dd. MMMM yyyy")</MudTd>
        }
        else
        {
            <MudTd>@upcomingEvent.DateFrom.ToLocalTime().ToString("dd. MMMM yyyy")</MudTd>
        }


        @if (upcomingEvent.Place is not null)
        {
            <MudTd>@upcomingEvent.Place</MudTd>
        }
        else
        {
            <MudTd></MudTd>
        }
        <MudTd>
            @*<MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.List" OnClick="() => NavigateToDetail(borrowing.Id)"></MudIconButton>*@
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Remove" OnClick="() => RemoveEvent(upcomingEvent.Id)"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>
<MudSpacer></MudSpacer>
@if (ShowCreateEvent)
{
    <EventForm PassEvent="NewEvent" Class="mt-2"></EventForm>
}

@code {
    private List<EventViewModel> Events { get; set; } = new();

    private bool ShowCreateEvent = false;

    private MudTable<EventViewModel> EventsGrid { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Events = Mapper.Map<List<EventViewModel>>(await EventService.GetAll().ToListAsync());
    }

    private async Task NewEvent(EventViewModel create)
    {
        var newEvent = Mapper.Map<Event>(create);
        await EventService.CreateAsync(newEvent);
        ShowCreateEvent = !ShowCreateEvent;
        await RefreshTable();
    }

    private string GetCreateButtonClass()
    {
        return ShowCreateEvent ? "active mt-0" : "mt-0";
    }

    private async Task RefreshTable()
    {
        Events = Mapper.Map<List<EventViewModel>>(await EventService.GetAll().Where(x=> DateTime.Today <= x.DateFrom).ToListAsync());
        StateHasChanged();
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<EventForm>("Create new Event");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProduct = result.Data as EventViewModel;
            await EventService.CreateAsync(Mapper.Map<Event>(newProduct));
        }
    }

    private async Task RemoveEvent(int id)
    {
        var result = await DialogService.ShowMessageBox("Smazat?", "Opravdu si přejete smazat tuto položku?", "Ano", "Ne");
        if (result.HasValue && result.Value)
        {
            await EventService.DeleteAsync(id);
            Events.RemoveAll(x => x.Id == id);
        }
    }

}
