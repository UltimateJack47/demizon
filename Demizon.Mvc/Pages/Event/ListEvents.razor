@page "/Events"

@using Microsoft.EntityFrameworkCore
@using AutoMapper
@using DomProject.Core.Services.Event
@using DomProject.Dal.Entities
@using DomProject.Mvc.ViewModels

<PageTitle>Events</PageTitle>

@inject IEventService EventService
@inject IMapper Mapper
@inject IDialogService DialogService

<MudTable @ref="EventsGrid" T="EventViewModel.Read" Items="Events">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Borrowings page</MudText>
        <MudSpacer />
        <MudIconButton Class="mt-0" Size="Size.Medium" aria-label="refresh" OnClick="RefreshTable" Icon="@Icons.Material.Filled.Refresh" ></MudIconButton>
        <MudButton Size="Size.Medium" Variant="Variant.Filled" Class="@GetCreateButtonClass()" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="() => ShowCreateEvent = !ShowCreateEvent">Create new</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Device</MudTh>
        <MudTh>User</MudTh>
        <MudTh>From</MudTh>
        <MudTh>To</MudTh>
        <MudTh Style="width: 40px"></MudTh>
    </HeaderContent>
    <RowTemplate Context="borrowing">
        @*<MudTd>@borrowing.Device.Name</MudTd>
        <MudTd>@borrowing.User.Name @borrowing.User.Surname</MudTd>
        <MudTd>@borrowing.Start.ToLocalTime().ToString("HH:mm:ss - dd. MM. yyyy")</MudTd>
        <MudTd>@borrowing.End?.ToLocalTime().ToString("HH:mm:ss - dd. MM. yyyy")</MudTd>
        <MudTd>
            $1$<MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.List" OnClick="() => NavigateToDetail(borrowing.Id)"></MudIconButton>#1#
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.RotateLeft" OnClick="() => ReturnDevice(borrowing.Id)"></MudIconButton>
        </MudTd>*@
    </RowTemplate>
</MudTable>
<MudSpacer></MudSpacer>
@if (ShowCreateEvent)
{
    <BorrowingForm PassEvent="NewEvent" Class="mt-2"></BorrowingForm>
}


@code {
    private List<EventViewModel.Read> Events { get; set; } = new ();
    
    private bool ShowCreateEvent = false;
    
    private MudTable<EventViewModel.Read> EventsGrid { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Events = Mapper.Map<List<EventViewModel.Read>>(await EventService.GetAll().ToListAsync());
    }

    private async Task NewEvent(EventViewModel.Create create)
    {
        var newEvent = Mapper.Map<Event>(create);
        await EventService.CreateAsync(newEvent);
        ShowCreateEvent = !ShowCreateEvent;
        await RefreshTable();
    }

    private string GetCreateButtonClass()
    {
        return ShowCreateEvent ? "active mt-0" : "mt-0";
    }

    private async Task RefreshTable()
    {
        Events = Mapper.Map<List<EventViewModel.Read>>(await EventService.GetAll().ToListAsync());
        StateHasChanged();
    }
    
    /*private async Task OpenCreateDialog()
    {
        var dialog = DialogService.Show<ProductForm>("Create new Product");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var newProduct = result.Data as ProductDto.Create;
            await ProductService.CreateAsync(Mapper.Map<Product>(newProduct));    
        }
    }*/

    /*private void NavigateToDetail(int id)
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"Borrowing/Detail/{id}");
    }*/

}
